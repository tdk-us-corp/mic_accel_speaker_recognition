# ################################
# Inspired by the speechBrain's script for training speaker recognition models:
# https://github.com/speechbrain/speechbrain/blob/develop/recipes/VoxCeleb/SpeakerRec/train_speaker_embeddings.py
# ################################

# Basic parameters
seed: 2002
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/farfield_aug/test123
save_folder: !ref "/mnt/009-Audio/Internships/AccelAuthentification/training_data/farfield_aug/test123_songle"
train_log: !ref <output_folder>/train_log.txt

# Data files
data_folder: "/mnt/009-Audio/Internships/AccelAuthentification/chinese_accel_micro_databases/old_augmentation/train"


# train_annotation: "/mnt/009-Audio/Internships/AccelAuthentification/chinese_accel_micro_databases/speaker_splits/split1/mic/train/fused_train.csv"
# valid_annotation: "/mnt/009-Audio/Internships/AccelAuthentification/chinese_accel_micro_databases/speaker_splits/split1/mic/train/fused_dev_fixed.csv"

# train_annotation: "/mnt/009-Audio/Internships/AccelAuthentification/chinese_accel_micro_databases/separatedEars/mic/train/fused_train.csv"
# valid_annotation: "/mnt/009-Audio/Internships/AccelAuthentification/chinese_accel_micro_databases/separatedEars/mic/train/fused_dev.csv"
# trying trimmed
train_annotation: "/mnt/009-Audio/Internships/AccelAuthentification/chinese_accel_micro_databases/old_augmentation/train_csv_3s/trimmed_paths_train.csv"
valid_annotation: "/mnt/009-Audio/Internships/AccelAuthentification/chinese_accel_micro_databases/old_augmentation/train_csv_3s/trimmed_paths_dev.csv"

# Farfield Aug
# train_annotation: "/mnt/009-Audio/Internships/AccelAuthentification/chinese_accel_micro_databases/farfield_aug/mic/fused_train.csv"
# valid_annotation: "/mnt/009-Audio/Internships/AccelAuthentification/chinese_accel_micro_databases/farfield_aug/mic/fused_dev.csv"

# FOR Separate EAR AUG DONT FORGET NUM OF CLASSES
# train_annotation: "/mnt/009-Audio/Internships/AccelAuthentification/chinese_accel_micro_databases/train_sep_ear/mic/fused_train.csv"
# valid_annotation: "/mnt/009-Audio/Internships/AccelAuthentification/chinese_accel_micro_databases/train_sep_ear/mic/fused_dev.csv"

# Inout config
n_MFCC: 20




skip_prep: True
ckpt_interval_minutes: 15 # save checkpoint every N min

# Training parameters
number_of_epochs: 15
batch_size: 64
lr: 0.001
base_lr: 0.00000001

max_lr: !ref <lr>
step_size: 65000
sample_rate: 16000
sentence_len: 3.0 # seconds
shuffle: True
random_chunk: True

# Kaldi FBank
n_mels: 80
left_frames: 0
right_frames: 0
deltas: False
context: False
f_min: 0
n_fft: 400
filter_shape: "triangular"
win_length: 25
hop_length: 10
ortho_norm: True


# Number of speakers
out_n_neurons: 260

patience: 50

num_workers: 32
dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: !ref <shuffle>
    num_workers: !ref <num_workers>

# Functions
compute_features: !new:speechbrain.lobes.features.Fbank
    n_mels: !ref <n_mels>
    left_frames: !ref <left_frames>
    right_frames: !ref <right_frames>
    deltas: !ref <deltas>
    f_min: !ref <f_min>
    # f_max: !ref <f_max>
    n_fft: !ref <n_fft>
    win_length: !ref <win_length>
    hop_length: !ref <hop_length>

embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
    input_size: !ref <n_MFCC>
    channels: [64, 64, 64, 64, 192]
    kernel_sizes: [5, 3, 3, 3, 1]
    dilations: [1, 2, 3, 4, 1]
    groups: [1, 1, 1, 1, 1]
    attention_channels: 64
    lin_neurons: 192


classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
    input_size: 192
    out_neurons: !ref <out_n_neurons>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False
    
# Functions
use_tacotron2_mel_spec: False

modules:
    compute_features: !ref <compute_features>
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    mean_var_norm: !ref <mean_var_norm>

compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
    loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
        margin: 0.2
        scale: 30

# compute_error: !name:speechbrain.nnet.losses.classification_error

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0.000002

lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
    base_lr: !ref <base_lr>
    max_lr: !ref <max_lr>
    step_size: !ref <step_size>


# Logging + checkpoints
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        embedding_model: !ref <embedding_model>
        # acc_embedding_model: !ref <acc_embedding_model>
        classifier: !ref <classifier>
        normalizer: !ref <mean_var_norm>
        counter: !ref <epoch_counter>
        lr_annealing: !ref <lr_annealing>
